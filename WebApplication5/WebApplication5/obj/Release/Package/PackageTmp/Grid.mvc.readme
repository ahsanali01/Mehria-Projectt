http://gridmvc.codeplex.com/

Note: Grid.Mvc installer has already made the following changes to your project:
- Views/Shared/_Grid.cshtml, Views/Shared/_GridPager.cshtml - views for grid
- Content/Gridmvc.css - default stylesheet for the grid
- Scripts/gridmvc.js, Scripts/gridmvc.min.js - Grid.Mvc scripts
- Reference GridMvc.dll

Follow these steps to start use Grid.mvc:

1. Define a model for display in the grid, like:

	public class Foo
	{
		public string Title { get; set; }
		public string Description { get;set; }
	}


2. Prepare your model in your controller, like:
	
	public ActionResult Index()
	{
		var items = fooRepository.GetAll();
		return View(items);
	}


3. Render GridMvc in the View: You can use Html helper extenstion:

	Reference Grid.Mvc.Html in your view:

		@using GridMvc.Html

	Render Grid.Mvc:

		@Html.Grid(Model).Columns(columns =>
						{
							columns.Add(foo => foo.Title).Titled("Custom column title").SetWidth(110);
							columns.Add(foo => foo.Description).Sortable(true);
						}).WithPaging(20)


4. Register a grid stylesheet and scripts in your _Layouts.cshtml file:
	
	<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" type="text/css" />
	<script src="@Url.Content("~/Scripts/gridmvc.min.js")" type="text/javascript"> </script>


Notes:
	
Default layout of Grid.Mvc uses Twitter Bootstrap (css framework). You also need to include stylesheets on your page. You can download it from - http://twitter.github.com/bootstrap/
like:

	<link href="@Url.Content("~/Content/Css/bootstrap.min.css")" rel="stylesheet" type="text/css" />


Also you need to ensure that jQuery has registred on the page before gridmvc.min.js script.

For more documetation, please see: http://gridmvc.codeplex.com/

MVCGridDefinitionTable.Add("TestGrid", new MVCGridBuilder<Person>(colDefauls)
    .WithAuthorizationType(AuthorizationType.AllowAnonymous)
    .WithSorting(sorting: true, defaultSortColumn: "Id", defaultSortDirection: SortDirection.Dsc)
    .WithPaging(paging: true, itemsPerPage: 10, allowChangePageSize: true, maxItemsPerPage: 100)
    .WithAdditionalQueryOptionNames("search")
    .AddColumns(cols =>
    {
        cols.Add("Id").WithValueExpression((p, c) => c.UrlHelper.Action("detail", "demo", new { id = p.Id }))
            .WithValueTemplate("<a href='{Value}'>{Model.Id}</a>", false)
            .WithPlainTextValueExpression(p => p.Id.ToString());
        cols.Add("FirstName").WithHeaderText("First Name")
            .WithVisibility(true, true)
            .WithValueExpression(p => p.FirstName);
        cols.Add("LastName").WithHeaderText("Last Name")
            .WithVisibility(true, true)
            .WithValueExpression(p => p.LastName);
        cols.Add("FullName").WithHeaderText("Full Name")
            .WithValueTemplate("{Model.FirstName} {Model.LastName}")
            .WithVisibility(visible: false, allowChangeVisibility: true)
            .WithSorting(false);
        cols.Add("StartDate").WithHeaderText("Start Date")
            .WithVisibility(visible: true, allowChangeVisibility: true)
            .WithValueExpression(p => p.StartDate.HasValue ? p.StartDate.Value.ToShortDateString() : "");
        cols.Add("Status")
            .WithSortColumnData("Active")
            .WithVisibility(visible: true, allowChangeVisibility: true)
            .WithHeaderText("Status")
            .WithValueExpression(p => p.Active ? "Active" : "Inactive")
            .WithCellCssClassExpression(p => p.Active ? "success" : "danger");
        cols.Add("Gender").WithValueExpression((p, c) => p.Gender)
            .WithAllowChangeVisibility(true);
        cols.Add("Email")
            .WithVisibility(visible: false, allowChangeVisibility: true)
            .WithValueExpression(p => p.Email);
        cols.Add("Url").WithVisibility(false)
            .WithValueExpression((p, c) => c.UrlHelper.Action("detail", "demo", new { id = p.Id }));
    })
    //.WithAdditionalSetting(MVCGrid.Rendering.BootstrapRenderingEngine.SettingNameTableClass, "notreal") // Example of changing table css class
    .WithRetrieveDataMethod((context) =>
    {
        var options = context.QueryOptions;
        int totalRecords;
        var repo = DependencyResolver.Current.GetService<IPersonRepository>();
        string globalSearch = options.GetAdditionalQueryOptionString("search");
        string sortColumn = options.GetSortColumnData<string>();
        var items = repo.GetData(out totalRecords, globalSearch, options.GetLimitOffset(), options.GetLimitRowcount(),
            sortColumn, options.SortDirection == SortDirection.Dsc);
        return new QueryResult<Person>()
        {
            Items = items,
            TotalRecords = totalRecords
        };
    })
);